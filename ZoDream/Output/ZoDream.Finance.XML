<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZoDream.Finance</name>
    </assembly>
    <members>
        <member name="T:ZoDream.Finance.Helper.SqLiteHelper">
            <summary>
            SQLite Helper
            </summary>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.#ctor">
            <summary>
            Creates a new <see cref="T:ZoDream.Finance.Helper.SqLiteHelper"/> instance. The ctor is marked private since all members are static.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.CreateFile(System.String)">
            <summary>
            新建数据库
            </summary>
            <param name="databaseFileName"></param>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.CreateCommand(System.Data.SQLite.SQLiteConnection,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connection">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.CreateCommand(System.String,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Creates the command.
            </summary>
            <param name="connectionString">Connection string.</param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Command parameters.</param>
            <returns>SQLite Command</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.CreateParameter(System.String,System.Data.DbType,System.Object)">
            <summary>
            Creates the parameter.
            </summary>
            <param name="parameterName">Name of the parameter.</param>
            <param name="parameterType">Parameter type.</param>
            <param name="parameterValue">Parameter value.</param>
            <returns>SQLiteParameter</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteDataSet(System.String,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of parameter values
            </summary>
            <param name="connectionString">SQLite Connection string</param>
            <param name="commandText">SQL Statement with embedded "@param" style parameter names</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteDataSet(System.Data.SQLite.SQLiteConnection,System.String,System.Object[])">
            <summary>
            Shortcut method to execute dataset from SQL Statement and object[] arrray of  parameter values
            </summary>
            <param name="cn">Connection.</param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns></returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteCommand)">
            <summary>
            Executes the dataset from a populated Command object.
            </summary>
            <param name="cmd">Fully populated SQLiteCommand</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteTransaction,System.String,System.Data.SQLite.SQLiteParameter[])">
            <summary>
            Executes the dataset in a SQLite Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,  /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">Sqlite Command parameters.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteDataset(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes the dataset with Transaction and object array of parameter values.
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,    /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="commandParameters">object[] array of parameter values.</param>
            <returns>DataSet</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.UpdateDataset(System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.SQLite.SQLiteCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid SQL statement  to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteReader(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            ShortCut method to return IDataReader
            NOTE: You should explicitly close the Command.connection you passed in as
            well as call Dispose on the Command  after reader is closed.
            We do this because IDataReader has no underlying Connection Property.
            </summary>
            <param name="cmd">SQLiteCommand Object</param>
            <param name="commandText">SQL Statement with optional embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteNonQuery with SqlStatement and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">Sql Statement with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns></returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteNonQuery(System.Data.SQLite.SQLiteTransaction,System.String,System.Object[])">
            <summary>
            Executes  non-query sql Statment with Transaction
            </summary>
            <param name="transaction">SQLiteTransaction. Transaction consists of Connection, Transaction,   /// and Command, all of which must be created prior to making this method call. </param>
            <param name="commandText">Command text.</param>
            <param name="paramList">Param list.</param>
            <returns>Integer</returns>
            <remarks>user must examine Transaction Object and handle transaction.connection .Close, etc.</remarks>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="cmd">CMD.</param>
            <returns></returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Shortcut to ExecuteScalar with Sql Statement embedded params and object[] param values
            </summary>
            <param name="connectionString">SQLite Connection String</param>
            <param name="commandText">SQL statment with embedded "@param" style parameters</param>
            <param name="paramList">object[] array of param values</param>
            <returns></returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteXmlReader(System.Data.IDbCommand)">
            <summary>
            Execute XmlReader with complete Command
            </summary>
            <param name="command">SQLite Command</param>
            <returns>XmlReader</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.AttachParameters(System.Data.SQLite.SQLiteCommand,System.String,System.Object[])">
            <summary>
            Parses parameter names from SQL Statement, assigns values from object array ,   /// and returns fully populated ParameterCollection.
            </summary>
            <param name="commandText">Sql Statement with "@param" style embedded parameters</param>
            <param name="paramList">object[] array of parameter values</param>
            <returns>SQLiteParameterCollection</returns>
            <remarks>Status experimental. Regex appears to be handling most issues. Note that parameter object array must be in same ///order as parameter names appear in SQL statement.</remarks>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Executes non query typed params from a DataRow
            </summary>
            <param name="command">Command.</param>
            <param name="dataRow">Data row.</param>
            <returns>Integer result code</returns>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the command's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:ZoDream.Finance.Helper.SqLiteHelper.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="T:ZoDream.Finance.ViewModel.DatabaseViewModel">
            <summary>
            This class contains properties that a View can data bind to.
            <para>
            See http://www.galasoft.ch/mvvm
            </para>
            </summary>
        </member>
        <member name="M:ZoDream.Finance.ViewModel.DatabaseViewModel.#ctor">
            <summary>
            Initializes a new instance of the DatabaseViewModel class.
            </summary>
        </member>
        <member name="T:ZoDream.Finance.ViewModel.LoginViewModel">
            <summary>
            This class contains properties that a View can data bind to.
            <para>
            See http://www.galasoft.ch/mvvm
            </para>
            </summary>
        </member>
        <member name="M:ZoDream.Finance.ViewModel.LoginViewModel.#ctor">
            <summary>
            Initializes a new instance of the LoginViewModel class.
            </summary>
        </member>
        <member name="T:ZoDream.Finance.ViewModel.MainViewModel">
            <summary>
            This class contains properties that the main View can data bind to.
            <para>
            See http://www.mvvmlight.net
            </para>
            </summary>
        </member>
        <member name="F:ZoDream.Finance.ViewModel.MainViewModel.WelcomeTitlePropertyName">
            <summary>
            The <see cref="P:ZoDream.Finance.ViewModel.MainViewModel.WelcomeTitle" /> property's name.
            </summary>
        </member>
        <member name="P:ZoDream.Finance.ViewModel.MainViewModel.WelcomeTitle">
            <summary>
            Gets the WelcomeTitle property.
            Changes to that property's value raise the PropertyChanged event. 
            </summary>
        </member>
        <member name="M:ZoDream.Finance.ViewModel.MainViewModel.#ctor(ZoDream.Finance.Model.IDataService)">
            <summary>
            Initializes a new instance of the MainViewModel class.
            </summary>
        </member>
        <member name="T:ZoDream.Finance.ViewModel.ViewModelLocator">
            <summary>
            This class contains static references to all the view models in the
            application and provides an entry point for the bindings.
            <para>
            See http://www.mvvmlight.net
            </para>
            </summary>
        </member>
        <member name="P:ZoDream.Finance.ViewModel.ViewModelLocator.Main">
            <summary>
            Gets the Main property.
            </summary>
        </member>
        <member name="P:ZoDream.Finance.ViewModel.ViewModelLocator.Login">
            <summary>
            Gets the view's ViewModel.
            </summary>
        </member>
        <member name="P:ZoDream.Finance.ViewModel.ViewModelLocator.Database">
            <summary>
            Gets the view's ViewModel.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.ViewModel.ViewModelLocator.Cleanup">
            <summary>
            Cleans up all the resources.
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.AccountView">
            <summary>
            Description for AccountView.
            </summary>
            <summary>
            AccountView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.AccountView.#ctor">
            <summary>
            Initializes a new instance of the AccountView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.AccountView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.AddView">
            <summary>
            Description for AddView.
            </summary>
            <summary>
            AddView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.AddView.#ctor">
            <summary>
            Initializes a new instance of the AddView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.AddView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.ChartView">
            <summary>
            Description for ChartView.
            </summary>
            <summary>
            ChartView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ChartView.#ctor">
            <summary>
            Initializes a new instance of the ChartView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ChartView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.DatabaseView">
            <summary>
            Description for DatabaseView.
            </summary>
            <summary>
            DatabaseView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.DatabaseView.#ctor">
            <summary>
            Initializes a new instance of the DatabaseView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.DatabaseView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.LoginView">
            <summary>
            Description for LoginView.
            </summary>
            <summary>
            LoginView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.LoginView.#ctor">
            <summary>
            Initializes a new instance of the LoginView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.LoginView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.OptionView">
            <summary>
            Description for OptionView.
            </summary>
            <summary>
            OptionView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.OptionView.#ctor">
            <summary>
            Initializes a new instance of the OptionView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.OptionView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.RegisterView">
            <summary>
            Description for RegisterView.
            </summary>
            <summary>
            RegisterView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.RegisterView.#ctor">
            <summary>
            Initializes a new instance of the RegisterView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.RegisterView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.ReportView">
            <summary>
            Description for ReportView.
            </summary>
            <summary>
            ReportView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ReportView.#ctor">
            <summary>
            Initializes a new instance of the ReportView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ReportView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.ResetView">
            <summary>
            Description for ResetView.
            </summary>
            <summary>
            ResetView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ResetView.#ctor">
            <summary>
            Initializes a new instance of the ResetView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ResetView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.View.ViewView">
            <summary>
            Description for ViewView.
            </summary>
            <summary>
            ViewView
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ViewView.#ctor">
            <summary>
            Initializes a new instance of the ViewView class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.View.ViewView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:ZoDream.Finance.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ZoDream.Finance.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:ZoDream.Finance.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:ZoDream.Finance.MainWindow.#ctor">
            <summary>
            Initializes a new instance of the MainWindow class.
            </summary>
        </member>
        <member name="M:ZoDream.Finance.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ZoDream.Finance.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:ZoDream.Finance.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:ZoDream.Finance.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
    </members>
</doc>
